# Annex
annex: /somewhere/

# Optional proxy settings
#
# Proxy URL. When defined, Rift uses this proxy service to download VM cloud
# images. When not defined in configuration, Rift fallbacks to using
# http[s]_proxy environment variables if defined, or directly connects to remote
# server.
#
# proxy: https://proxy:3128
#
# Comma separated list of URL for which proxy must not be used. When not
# defined in configuration, Rift uses no_proxy environment variable if defined.
#
# no_proxy: localhost,.intranet.company.ltd

# VM options
vm_image: images/default.qcow
# full copy of image
vm_image_copy: False

# TCP port range Rift can select for SSH server in the VMs
# vm_port_range:
#   min: 10000
#   max: 15000

# Build architectures
arch:
- x86_64
- aarch64

# Custom rpm_macos
#
# Dict containing a key defining the macro name with its corresponding content
# as value.
# WARNING: these macros take precedence from the default configuration.
#
#rpm_macros:
#  kernel_version: 1.2.4.4

# Optional VM settings
#
# Path to directory where downloaded cloud images are stored locally. This
# directory serves as a cache: when images are already present in this directory
# (ie. same filename), download is skipped. If this parameter is not defined,
# images are downloaded in a temporary directory.
#
# vm_images_cache: /path/to/images/cache
#
# List of paths to RPM packages that are copied into the VM before execution of
# build post script. This script is then responsible of their installation in VM
# image.
#
# vm_additional_rpms:
# - /path/to/first-rpm-1.el8.x86_64.rpm
# - /path/to/second-rpm-1.el8.x86_64.rpm
#
# Path to alternative cloud-init template file. By default, Rift uses
# cloud-init.tpl file located in project top folder.
#
# vm_cloud_init_tpl: /path/to/cloud-init.tpl
#
# Path to alternative VM build post script. By default, Rift executes
# build-post.sh script located in project top folder.
#
# vm_build_post_script: /path/to/build-post.sh

# Dedicated options for aarch64 builds
#arch: "aarch64"
#arch_efi_bios: "/ccc/home/cont001/ocre/cedeyna/Ocean/rift/vendor/QEMU_EFI.fd"
#vm_cpu: "cortex-a72"

# Example GPG settings for package cryptographic signing
#gpg:
#  keyring: ~/.gnupg
#  key: rift
#  passphrase: secr3t

# createrepo tool location
#createrepo: createrepo_c

# It is possible to declare architecture specific options with a mapping under
# the key named after this architectur.
# x86_64:
#   vm_image: images/image-x86_64.qcow2

# External repositories
#
repos:
    # Repository used by VM OS
    os:
        # $arch placeholder is automatically replaced by the currently processed
        # architecture.
        url: https://alma.mirror.ate.info/8.8/BaseOS/$arch/os
        modules_hotfixes: true
        proxy: "http://127.0.0.1:8080"

# Remote repositories can be synchronized in local mirrors when `sync` key is
# defined in repos definition.
#
# 3 synchronization methods are supported: dnf (default), lftp and epel. With
# dnf method, rift downloads repository metadata to discover packages referenced
# in the repository. With lftp method, `lftp mirror` is executed on the given
# URL. With epel method, rift downloads EPEL files index and download all files
# under the given URL. Default method is lftp.
#
# Include and exclude regex patterns can be specified to restrict list of
# synchronized files.
#
# repos:
#     os:
#         sync:
#             source: https://repo.almalinux.org/almalinux/9/BaseOS
#             method: dnf
#             include:
#             - ^x86_64
#             - ^aarch64
#             exclude:
#             - /kickstart/
#         url: â€¦
#
# For repository synchronization to work, the local output directory must be
# defined with:
#
# sync_output: /path/to/local/mirrors

# Automatic dependency tracking. If enabled, when Rift builds or validate
# packages, it also searches for reverse build dependencies of these packages
# recursively and automatically rebuild/revalidate them to ensure absence of
# regressions.
#
# dependency_tracking: false
